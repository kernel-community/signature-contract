{
  "address": "0x495AB49F0a79B212f02F1183200B21d9C0F3AA36",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxyRegistryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "start",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "end",
          "type": "uint16"
        }
      ],
      "name": "NewSignature",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "backup",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "essay",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gateway",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "imgHash",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "start",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "end",
          "type": "uint16"
        }
      ],
      "name": "mintSelected",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "selection",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "start",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "end",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setRoyalties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newGateway",
          "type": "string"
        }
      ],
      "name": "updateGateway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4d635dad2e5aa8eb00281b66d46b3231192f7bbb8fd806cae0d9c3eba1c967d5",
  "receipt": {
    "to": null,
    "from": "0x5f3371793285920351344a1EaaAA48d45e600652",
    "contractAddress": "0x495AB49F0a79B212f02F1183200B21d9C0F3AA36",
    "transactionIndex": 1,
    "gasUsed": "2210771",
    "logsBloom": "0x
    "blockHash": "0x77d2f32f9d9488e3ffa8639c64391bda14601f4665d49b00bece0afeab82bcbe",
    "transactionHash": "0x4d635dad2e5aa8eb00281b66d46b3231192f7bbb8fd806cae0d9c3eba1c967d5",
    "logs": [],
    "blockNumber": 10886362,
    "cumulativeGasUsed": "2236766",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf57b2c51ded3a29e6891aba85459d600256cf317",
    "0x1D32F2aCB832AFc3D8c8ffB3BE20e8dC7Faac507"
  ],
  "numDeployments": 10,
  "solcInputHash": "236bd815119f009173c9fdc444b168a6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"start\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"end\",\"type\":\"uint16\"}],\"name\":\"NewSignature\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backup\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"essay\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imgHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"start\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"end\",\"type\":\"uint16\"}],\"name\":\"mintSelected\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"selection\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"start\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"end\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newGateway\",\"type\":\"string\"}],\"name\":\"updateGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"mintSelected(uint16,uint16)\":{\"params\":{\"end\":\"the word index where the chosen highlight ends\",\"start\":\"the word index the chosen highlight starts on\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"royaltyInfo(uint256,uint256)\":{\"params\":{\"_tokenId\":\"- the NFT asset queried for royalty information\",\"_value\":\"- the sale price of the NFT asset specified by _tokenId\"},\"returns\":{\"receiver\":\"- address of who should be sent the royalty payment\",\"royaltyAmount\":\"- the royalty payment amount for value sale price\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setRoyalties(address,uint256)\":{\"params\":{\"recipient\":\"the royalties recipient - will always be pr1s0nart, for regulatory reasons.\",\"value\":\"royalties value (between 0 and 10000)\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"id\":\"the tokenId for which we are querying the metadata\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"contractURI()\":{\"notice\":\"Link to contract metadata\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\"},\"mintSelected(uint16,uint16)\":{\"notice\":\"mints a unique NFT from some user-selected piece of text (which we make into an image & store in Arweave)\"},\"setRoyalties(address,uint256)\":{\"notice\":\"Set the royalties for the whole contract. Our intention is to set it to 10% in perpetuity.\"},\"tokenURI(uint256)\":{\"notice\":\"this overrides the usual tokenURI to return base64 encoded metadata and, in particular, an animation_url rather than an           image field, because that is how secondary marketplaces will display the image generated by our little React img generator           living immutably on IPFS.\"},\"updateGateway(string)\":{\"notice\":\"in case the IPFS gateway ever goes down and we need to move to another, more local, solution\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SignatureNFT.sol\":\"SignatureNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5efa2a2ed44af15fd5bec8c43b45cb26fe6cb68671fea151e6afcfed66ed2672\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/SignatureNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport {ERC721Tradable} from \\\"./base/ERC721Tradable.sol\\\";\\nimport { Counters } from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\n//           ,,_\\n//        zd$$??=\\n//      z$$P? F:`c,                _\\n//     d$$, `c'we&&i           ,=caRe\\n//    $$$$ sign,?888i       ,=P\\\"2?us\\\"\\n//     $\\\" \\\" ?$$$,?888.    ,-''`>, bee\\n//      $'joy,?$$,?888   ,h' \\\"I$'J$e\\n//       ... `?$$$,\\\"88,`$$h  88love'd$\\\"\\n//     d$PP\\\"\\\"?-,\\\"?$$,?8h`$$,,88'$Q42\\\"\\n//     ?,,_`=4c,?=,\\\"?ye$s`?E2$'? '\\n//        `\\\"\\\"?==\\\"\\\"=-\\\"\\\" `\\\"\\\"-`'_,,,,\\n//            .eco?qualiJC,-,\\\"=?\\n//                      \\\"\\\"\\\"=='?\\\"\\n\\ncontract SignatureNFT is ERC721Tradable {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIdCounter;\\n\\n    error NotAuthorized();\\n\\n    struct Highlight {\\n        uint16 start;\\n        uint16 end;\\n    }\\n    // maps tokenId to the start and end of the highlighted text\\n    mapping(uint256 => Highlight) public selection;\\n\\n    // stores IPFS gateway, in case it ever changes\\n    string public gateway = \\\"https://ipfs.io/ipfs/\\\";\\n\\n    // stores hash of image generator app\\n    string public imgHash = \\\"QmYHGGTbqwFtfLFhhAKojVbmJwkVMNyqrniG9HLL1PYpyD\\\";\\n\\n    // stores an arweave backup of the image generator for the external url metadata\\n    string public backup = \\\"https://arweave.net/0b5HtyTwPgtWY72OENfI3Jz7ugkCzYDKcnRkpgLCx64\\\";\\n\\n    //stores a reference to the final essay text\\n    string public essay = \\\"https://arweave.net/wmn665qjC5J58QyFvaSJNEUpCmss1rfF-1b6xbTsxp4\\\";\\n\\n    // A Kernel address for proper attribution\\n    address public creator;\\n\\n    event NewSignature(address signer, uint256 indexed tokenId, uint16 start, uint16 end);\\n\\n    modifier onlyCreator() {\\n        if (msg.sender != creator) {\\n            revert NotAuthorized();\\n        }\\n        _;\\n    }\\n\\n    constructor(address _proxyRegistryAddress, address _creator)\\n        ERC721Tradable(\\\"Signature Economies\\\", \\\"SIGN\\\", _proxyRegistryAddress)\\n    {\\n        creator = _creator;\\n    }\\n\\n    /**\\n     * @notice Link to contract metadata\\n     */\\n    function contractURI() \\n        external \\n        pure \\n        returns (string memory) \\n    {\\n        return\\n            \\\"https://arweave.net/hh7ANFDf_LvzktqhwOzMkIaOlvdh_T2_WQRY1kQsc1Y\\\";\\n    }\\n\\n    /** @notice          Set the royalties for the whole contract. Our intention is to set it to 10% in perpetuity.\\n     *  @param recipient the royalties recipient - will always be pr1s0nart, for regulatory reasons.\\n     *  @param value     royalties value (between 0 and 10000)\\n     */\\n    function setRoyalties(address recipient, uint256 value)\\n        external\\n        onlyCreator\\n    {\\n        _setRoyalties(recipient, value);\\n    }\\n\\n    /**\\n     * @notice      mints a unique NFT from some user-selected piece of text (which we make into an image & store in Arweave)\\n     * @param start the word index the chosen highlight starts on\\n     * @param end   the word index where the chosen highlight ends\\n     */\\n    function mintSelected(uint16 start, uint16 end) \\n        external \\n    {\\n        // The 510 character limit here is an arbitrary limit of our p5.js rendering script. We have to draw the line somewhere,\\n        // so long as you remember that this is merely a convention, waiting to be transcended.\\n        require(start < end && start >= 0 && end <= 13083 && end - start <= 463, \\\"Invalid index\\\");\\n        uint256 newTokenId = _tokenIdCounter.current();\\n        selection[newTokenId] = Highlight(start, end);\\n        _safeMint(creator, msg.sender, newTokenId);\\n        _tokenIdCounter.increment();\\n\\n        emit NewSignature(msg.sender, newTokenId, start, end);\\n    }\\n\\n    /**\\n     * @notice   this overrides the usual tokenURI to return base64 encoded metadata and, in particular, an animation_url rather than an\\n     *           image field, because that is how secondary marketplaces will display the image generated by our little React img generator\\n     *           living immutably on IPFS.\\n     * @param id the tokenId for which we are querying the metadata\\n     */\\n    function tokenURI(uint256 id) \\n        public \\n        view \\n        override \\n        returns (string memory) \\n    {\\n      require(_exists(id), \\\"not exist\\\");\\n      Highlight memory highlight = selection[id];\\n      string memory image = string(abi.encodePacked(gateway,imgHash,'/#',Strings.toString(highlight.start),'-',Strings.toString(highlight.end)));\\n      string memory url = string(abi.encodePacked(backup,'/#',Strings.toString(highlight.start),'-',Strings.toString(highlight.end)));\\n\\n      return\\n          string(\\n              abi.encodePacked(\\n                'data:application/json;base64,',\\n                Base64.encode(\\n                    bytes(\\n                          abi.encodePacked(\\n                              '{\\\"name\\\":\\\"Signature NFT #',Strings.toString(id),'\\\",\\\"description\\\":\\\"A unique sign of our times, selected to represent increasingly significant money in this infinite game we are playing together. As you consider these unique symbols, remember that wealth truly means having enough to share.\\\",\\\"external_url\\\":\\\"',url,'\\\",\\\"animation_url\\\":\\\"',image,'\\\"}'\\n                          )\\n                        )\\n                    )\\n              )\\n          );\\n    }\\n\\n    /**\\n     * @notice in case the IPFS gateway ever goes down and we need to move to another, more local, solution\\n     */\\n    function updateGateway(string memory newGateway) \\n        external\\n        onlyCreator\\n    {\\n        gateway = newGateway;\\n    }\\n}\",\"keccak256\":\"0x9d59183627bf300d240758ee53d76614c410438da7c8d5172fc1ea9fabe215b8\",\"license\":\"MIT\"},\"contracts/base/ERC2981ContractWideRoyalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title ERC721 URI Storage Extension\\n\\n/// This contract and the contracts it imports are copied from our good friend dievardump, with deep thanks and love.\\n/// https://github.com/dievardump/EIP2981-implementation/blob/9d7da405f16adfddb2b9a528d146e1049fcf5e5d/contracts/ERC2981ContractWideRoyalties.sol\\n///\\n/// We have modified the pragma and the way imports are specified.\\n\\npragma solidity 0.8.7;\\n\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nimport { ERC2981Royalties, IERC2981Royalties } from './ERC2981Royalties.sol';\\n\\n/// @dev This is a contract used to add ERC2981 support to ERC721 contracts\\n/// @dev This implementation has the same royalties for each and every token\\nabstract contract ERC2981ContractWideRoyalties is ERC2981Royalties {\\n    RoyaltyInfo private _royalties;\\n\\n    /// @dev Sets token royalties\\n    /// @param recipient recipient of the royalties\\n    /// @param value percentage (using 2 decimals - 10000 = 100, 0 = 0)\\n    function _setRoyalties(address recipient, uint256 value) internal {\\n        require(value <= 10000, 'ERC2981Royalties: Too high');\\n        _royalties = RoyaltyInfo(recipient, uint24(value));\\n    }\\n\\n    /// @inheritdoc\\tIERC2981Royalties\\n    function royaltyInfo(uint256, uint256 value)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        RoyaltyInfo memory royalties = _royalties;\\n        receiver = royalties.recipient;\\n        royaltyAmount = (value * royalties.amount) / 10000;\\n    }\\n}\",\"keccak256\":\"0xe6665bf3d2b987a22e2953e285675d7cc73975ba78ae69115c2f3a16473489ef\",\"license\":\"MIT\"},\"contracts/base/ERC2981Royalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nimport { IERC2981Royalties } from '../interfaces/IERC2981Royalties.sol';\\n\\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\\nabstract contract ERC2981Royalties is ERC165, IERC2981Royalties {\\n    struct RoyaltyInfo {\\n        address recipient;\\n        uint24 amount;\\n    }\\n\\n    /// @inheritdoc\\tERC165\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC2981Royalties).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\",\"keccak256\":\"0x524dc6a4f5c76b567e8c43008749f448ada2936057e80a460e36feb89e1646e5\",\"license\":\"MIT\"},\"contracts/base/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title ERC721 Token Implementation\\n\\n// LICENSE\\n// ERC721.sol modifies OpenZeppelin's ERC721.sol:\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/6618f9f18424ade44116d0221719f4c93be6a078/contracts/token/ERC721/ERC721.sol\\n//\\n// ERC721.sol source code copyright OpenZeppelin licensed under the MIT License.\\n// With modifications by Nounders DAO.\\n//\\n//\\n// MODIFICATIONS:\\n// `_safeMint` and `_mint` contain an additional `creator` argument and\\n// emit two `Transfer` logs, rather than one. The first log displays the\\n// transfer (mint) from `address(0)` to the `creator`. The second displays the\\n// transfer from the `creator` to the `to` address. This enables correct\\n// attribution on various NFT marketplaces.\\n\\npragma solidity 0.8.7;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), 'ERC721: balance query for the zero address');\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), 'ERC721: owner query for nonexistent token');\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), 'ERC721Metadata: URI query for nonexistent token');\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, 'ERC721: approval to current owner');\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            'ERC721: approve caller is not owner nor approved for all'\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), 'ERC721: approved query for nonexistent token');\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), 'ERC721: approve to caller');\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), 'ERC721: transfer caller is not owner nor approved');\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), 'ERC721: transfer caller is not owner nor approved');\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), 'ERC721: transfer to non ERC721Receiver implementer');\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), 'ERC721: operator query for nonexistent token');\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId`, transfers it to `to`, and emits two log events -\\n     * 1. Credits the `minter` with the mint.\\n     * 2. Shows transfer from the `minter` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address creator,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        _safeMint(creator, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address creator,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(creator, to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            'ERC721: transfer to non ERC721Receiver implementer'\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to`, and emits two log events -\\n     * 1. Credits the `creator` with the mint.\\n     * 2. Shows transfer from the `creator` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address creator,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(to != address(0), 'ERC721: mint to the zero address');\\n        require(!_exists(tokenId), 'ERC721: token already minted');\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), creator, tokenId);\\n        emit Transfer(creator, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, 'ERC721: transfer of token that is not own');\\n        require(to != address(0), 'ERC721: transfer to the zero address');\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert('ERC721: transfer to non ERC721Receiver implementer');\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\",\"keccak256\":\"0xe7de919b7a85ab97210ad4d2cb7d3f8514605c8a94ed64ec93e7082247f3b68d\",\"license\":\"MIT\"},\"contracts/base/ERC721Tradable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title ERC721Tradable\\n///\\n/// An ERC721 contract that whitelists the OpenSea Proxy for easy listing & trading and allows us to set contract-wide royalty information.\\n///\\n/// Based on work done originally by Dynamic Culture\\n/// https://github.com/Dynamiculture/neurapunks-contract/blob/d250e955453773566ba54e64fdea39ee221bc3d4/contracts/ERC721Tradable.sol\\n\\npragma solidity 0.8.7;\\n\\nimport { ERC721 } from \\\"./ERC721.sol\\\";\\nimport { ERC721URIStorage } from \\\"./ERC721URIStorage.sol\\\";\\nimport { ERC2981ContractWideRoyalties, ERC2981Royalties } from \\\"./ERC2981ContractWideRoyalties.sol\\\";\\n\\ncontract OwnableDelegateProxy {}\\n\\ncontract ProxyRegistry {\\n    mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\\ncontract ERC721Tradable is \\n    ERC721URIStorage,\\n    ERC2981ContractWideRoyalties \\n{\\n\\n    // OpenSea's Proxy Registry\\n    address proxyRegistryAddress;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _proxyRegistryAddress\\n    ) ERC721(_name, _symbol) {\\n        proxyRegistryAddress = _proxyRegistryAddress;\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\\n        internal\\n        override(ERC721)\\n    {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override(ERC721URIStorage)\\n        returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC2981Royalties)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        // Whitelist OpenSea proxy contract for easy trading.\\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\n        if (address(proxyRegistry.proxies(owner)) == operator) {\\n            return true;\\n        }\\n\\n        return super.isApprovedForAll(owner, operator);\\n    }\\n}\\n\",\"keccak256\":\"0x21537c218e7a24756be2e80b3d1cccfd001f98ebd7872381a6de951173fc5183\",\"license\":\"MIT\"},\"contracts/base/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title ERC721 URI Storage Extension\\n\\n// LICENSE\\n// ERC721.sol modifies OpenZeppelin's ERC721URIStorage.sol:\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/6618f9f18424ade44116d0221719f4c93be6a078/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\n//\\n// ERC721URIStorage.sol source code copyright OpenZeppelin licensed under the MIT License.\\n// With modifications by Nounders DAO.\\n//\\n// MODIFICATIONS:\\n// Consumes modified `ERC721` contract. See notes in `ERC721.sol`.\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"./ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2c97635f3370a3d5062c30e993e166af604b36cf1155f96e2cedf41cd905c2dd\",\"license\":\"MIT\"},\"contracts/interfaces/IERC2981Royalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n/// @title IERC2981Royalties\\n/// @dev Interface for the ERC2981 - Token Royalty standard\\ninterface IERC2981Royalties {\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _value - the sale price of the NFT asset specified by _tokenId\\n    /// @return _receiver - address of who should be sent the royalty payment\\n    /// @return _royaltyAmount - the royalty payment amount for value sale price\\n    function royaltyInfo(uint256 _tokenId, uint256 _value)\\n        external\\n        view\\n        returns (address _receiver, uint256 _royaltyAmount);\\n}\",\"keccak256\":\"0xd16a3c9fa40e58a2c2a62b721b239b22b03cc4ddf63dfc4685179e489d8eecb7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052601560808190527f68747470733a2f2f697066732e696f2f697066732f000000000000000000000060a09081526200004091600b9190620001c4565b506040518060600160405280602e815260200162002425602e913980516200007191600c91602090910190620001c4565b506040518060600160405280603f815260200162002492603f91398051620000a291600d91602090910190620001c4565b506040518060600160405280603f815260200162002453603f91398051620000d391600e91602090910190620001c4565b50348015620000e157600080fd5b50604051620024d1380380620024d1833981016040819052620001049162000287565b6040518060400160405280601381526020017f5369676e61747572652045636f6e6f6d696573000000000000000000000000008152506040518060400160405280600481526020016329a4a3a760e11b815250838282816000908051906020019062000172929190620001c4565b50805162000188906001906020840190620001c4565b5050600880546001600160a01b039384166001600160a01b031991821617909155600f805496909316951694909417905550620002fc92505050565b828054620001d290620002bf565b90600052602060002090601f016020900481019282620001f6576000855562000241565b82601f106200021157805160ff191683800117855562000241565b8280016001018555821562000241579182015b828111156200024157825182559160200191906001019062000224565b506200024f92915062000253565b5090565b5b808211156200024f576000815560010162000254565b80516001600160a01b03811681146200028257600080fd5b919050565b600080604083850312156200029b57600080fd5b620002a6836200026a565b9150620002b6602084016200026a565b90509250929050565b600181811c90821680620002d457607f821691505b60208210811415620002f657634e487b7160e01b600052602260045260246000fd5b50919050565b612119806200030c6000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80636352211e116100c3578063b88d4fde1161007c578063b88d4fde146102da578063c87b56dd146102ed578063d016fc2214610300578063e726168714610349578063e8a3d4851461035c578063e985e9c51461036457600080fd5b80636352211e146102655780636f951f381461027857806370a082311461028b5780638c7ea24b146102ac57806395d89b41146102bf578063a22cb465146102c757600080fd5b806323b872dd1161011557806323b872dd146101f55780632a55205a14610208578063427158f61461023a57806342842e0e1461024257806350a9e127146102555780635a41c8551461025d57600080fd5b806301ffc9a71461015d57806302d05d3f1461018557806306fdde03146101b0578063081812fc146101c5578063095ea7b3146101d8578063116191b6146101ed575b600080fd5b61017061016b366004611924565b610377565b60405190151581526020015b60405180910390f35b600f54610198906001600160a01b031681565b6040516001600160a01b03909116815260200161017c565b6101b8610388565b60405161017c9190611e0d565b6101986101d33660046119f7565b61041a565b6101eb6101e63660046118f8565b6104b4565b005b6101b86105ca565b6101eb610203366004611804565b610658565b61021b610216366004611a10565b610689565b604080516001600160a01b03909316835260208301919091520161017c565b6101b86106de565b6101eb610250366004611804565b6106eb565b6101b8610706565b6101b8610713565b6101986102733660046119f7565b610720565b6101eb6102863660046119c4565b610797565b61029e6102993660046117a7565b6108dd565b60405190815260200161017c565b6101eb6102ba3660046118f8565b610964565b6101b861099d565b6101eb6102d53660046118c5565b6109ac565b6101eb6102e8366004611845565b610a71565b6101b86102fb3660046119f7565b610aa9565b61032e61030e3660046119f7565b600a6020526000908152604090205461ffff808216916201000090041682565b6040805161ffff93841681529290911660208301520161017c565b6101eb61035736600461197b565b610c1a565b6101b8610c58565b6101706103723660046117cb565b610c78565b600061038282610d48565b92915050565b60606000805461039790611f74565b80601f01602080910402602001604051908101604052809291908181526020018280546103c390611f74565b80156104105780601f106103e557610100808354040283529160200191610410565b820191906000526020600020905b8154815290600101906020018083116103f357829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104985760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006104bf82610720565b9050806001600160a01b0316836001600160a01b0316141561052d5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161048f565b336001600160a01b038216148061054957506105498133610c78565b6105bb5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161048f565b6105c58383610d6d565b505050565b600b80546105d790611f74565b80601f016020809104026020016040519081016040528092919081815260200182805461060390611f74565b80156106505780601f1061062557610100808354040283529160200191610650565b820191906000526020600020905b81548152906001019060200180831161063357829003601f168201915b505050505081565b6106623382610ddb565b61067e5760405162461bcd60e51b815260040161048f90611e72565b6105c5838383610eaa565b604080518082019091526007546001600160a01b038116808352600160a01b90910462ffffff16602083018190529091600091612710906106ca9086611eef565b6106d49190611edb565b9150509250929050565b600e80546105d790611f74565b6105c583838360405180602001604052806000815250610a71565b600d80546105d790611f74565b600c80546105d790611f74565b6000818152600260205260408120546001600160a01b0316806103825760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161048f565b8061ffff168261ffff161080156107ac575060015b80156107be575061331b8161ffff1611155b80156107d957506101cf6107d28383611f0e565b61ffff1611155b6108155760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b604482015260640161048f565b600061082060095490565b60408051808201825261ffff808716825285811660208084019182526000868152600a909152939093209151825493518216620100000263ffffffff19909416911617919091179055600f54909150610883906001600160a01b0316338361104a565b610891600980546001019055565b6040805133815261ffff8581166020830152841681830152905182917f33544f5c3a1a056bc1ca444c63ba29f441dad27582b6fe53231f9ba7f197c52b919081900360600190a2505050565b60006001600160a01b0382166109485760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161048f565b506001600160a01b031660009081526003602052604090205490565b600f546001600160a01b0316331461098f5760405163ea8e4eb560e01b815260040160405180910390fd5b6109998282611065565b5050565b60606001805461039790611f74565b6001600160a01b038216331415610a055760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161048f565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610a7b3383610ddb565b610a975760405162461bcd60e51b815260040161048f90611e72565b610aa384848484611101565b50505050565b6000818152600260205260409020546060906001600160a01b0316610afc5760405162461bcd60e51b81526020600482015260096024820152681b9bdd08195e1a5cdd60ba1b604482015260640161048f565b6000828152600a6020908152604080832081518083019092525461ffff8082168084526201000090920416928201929092529190600b90600c90610b3f90611134565b610b50856020015161ffff16611134565b604051602001610b639493929190611b14565b60405160208183030381529060405290506000600d610b89846000015161ffff16611134565b610b9a856020015161ffff16611134565b604051602001610bac93929190611b74565b6040516020818303038152906040529050610bf1610bc986611134565b8284604051602001610bdd93929190611bca565b604051602081830303815290604052611232565b604051602001610c019190611d95565b6040516020818303038152906040529350505050919050565b600f546001600160a01b03163314610c455760405163ea8e4eb560e01b815260040160405180910390fd5b805161099990600b906020840190611681565b60606040518060600160405280603f81526020016120a5603f9139905090565b60085460405163c455279160e01b81526001600160a01b03848116600483015260009281169190841690829063c45527919060240160206040518083038186803b158015610cc557600080fd5b505afa158015610cd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfd919061195e565b6001600160a01b03161415610d16576001915050610382565b6001600160a01b0380851660009081526005602090815260408083209387168352929052205460ff165b949350505050565b60006001600160e01b0319821663152a902d60e11b1480610382575061038282611386565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610da282610720565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316610e545760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161048f565b6000610e5f83610720565b9050806001600160a01b0316846001600160a01b03161480610e9a5750836001600160a01b0316610e8f8461041a565b6001600160a01b0316145b80610d405750610d408185610c78565b826001600160a01b0316610ebd82610720565b6001600160a01b031614610f255760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161048f565b6001600160a01b038216610f875760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161048f565b610f92600082610d6d565b6001600160a01b0383166000908152600360205260408120805460019290610fbb908490611f31565b90915550506001600160a01b0382166000908152600360205260408120805460019290610fe9908490611ec3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6105c5838383604051806020016040528060008152506113d6565b6127108111156110b75760405162461bcd60e51b815260206004820152601a60248201527f45524332393831526f79616c746965733a20546f6f2068696768000000000000604482015260640161048f565b604080518082019091526001600160a01b0390921680835262ffffff909116602090920182905260078054600160a01b9093026001600160b81b0319909316909117919091179055565b61110c848484610eaa565b611118848484846113ea565b610aa35760405162461bcd60e51b815260040161048f90611e20565b6060816111585750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611182578061116c81611faf565b915061117b9050600a83611edb565b915061115c565b60008167ffffffffffffffff81111561119d5761119d612020565b6040519080825280601f01601f1916602001820160405280156111c7576020820181803683370190505b5090505b8415610d40576111dc600183611f31565b91506111e9600a86611fca565b6111f4906030611ec3565b60f81b8183815181106112095761120961200a565b60200101906001600160f81b031916908160001a90535061122b600a86611edb565b94506111cb565b606081516000141561125257505060408051602081019091526000815290565b600060405180606001604052806040815260200161206560409139905060006003845160026112819190611ec3565b61128b9190611edb565b611296906004611eef565b67ffffffffffffffff8111156112ae576112ae612020565b6040519080825280601f01601f1916602001820160405280156112d8576020820181803683370190505b509050600182016020820185865187015b80821015611344576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453506001830192506112e9565b505060038651066001811461136057600281146113735761137b565b603d6001830353603d600283035361137b565b603d60018303535b509195945050505050565b60006001600160e01b031982166380ac58cd60e01b14806113b757506001600160e01b03198216635b5e139f60e01b145b8061038257506301ffc9a760e01b6001600160e01b0319831614610382565b6113e18484846114f7565b61111860008484845b60006001600160a01b0384163b156114ec57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061142e903390899088908890600401611dda565b602060405180830381600087803b15801561144857600080fd5b505af1925050508015611478575060408051601f3d908101601f1916820190925261147591810190611941565b60015b6114d2573d8080156114a6576040519150601f19603f3d011682016040523d82523d6000602084013e6114ab565b606091505b5080516114ca5760405162461bcd60e51b815260040161048f90611e20565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610d40565b506001949350505050565b6001600160a01b03821661154d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161048f565b6000818152600260205260409020546001600160a01b0316156115b25760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161048f565b6001600160a01b03821660009081526003602052604081208054600192906115db908490611ec3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03868116919091179091559051839291861691907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a480826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b82805461168d90611f74565b90600052602060002090601f0160209004810192826116af57600085556116f5565b82601f106116c857805160ff19168380011785556116f5565b828001600101855582156116f5579182015b828111156116f55782518255916020019190600101906116da565b50611701929150611705565b5090565b5b808211156117015760008155600101611706565b600067ffffffffffffffff8084111561173557611735612020565b604051601f8501601f19908116603f0116810190828211818310171561175d5761175d612020565b8160405280935085815286868601111561177657600080fd5b858560208301376000602087830101525050509392505050565b803561ffff811681146117a257600080fd5b919050565b6000602082840312156117b957600080fd5b81356117c481612036565b9392505050565b600080604083850312156117de57600080fd5b82356117e981612036565b915060208301356117f981612036565b809150509250929050565b60008060006060848603121561181957600080fd5b833561182481612036565b9250602084013561183481612036565b929592945050506040919091013590565b6000806000806080858703121561185b57600080fd5b843561186681612036565b9350602085013561187681612036565b925060408501359150606085013567ffffffffffffffff81111561189957600080fd5b8501601f810187136118aa57600080fd5b6118b98782356020840161171a565b91505092959194509250565b600080604083850312156118d857600080fd5b82356118e381612036565b9150602083013580151581146117f957600080fd5b6000806040838503121561190b57600080fd5b823561191681612036565b946020939093013593505050565b60006020828403121561193657600080fd5b81356117c48161204e565b60006020828403121561195357600080fd5b81516117c48161204e565b60006020828403121561197057600080fd5b81516117c481612036565b60006020828403121561198d57600080fd5b813567ffffffffffffffff8111156119a457600080fd5b8201601f810184136119b557600080fd5b610d408482356020840161171a565b600080604083850312156119d757600080fd5b6119e083611790565b91506119ee60208401611790565b90509250929050565b600060208284031215611a0957600080fd5b5035919050565b60008060408385031215611a2357600080fd5b50508035926020909101359150565b60008151808452611a4a816020860160208601611f48565b601f01601f19169290920160200192915050565b60008151611a70818560208601611f48565b9290920192915050565b8054600090600181811c9080831680611a9457607f831692505b6020808410821415611ab657634e487b7160e01b600052602260045260246000fd5b818015611aca5760018114611adb57611b08565b60ff19861689528489019650611b08565b60008881526020902060005b86811015611b005781548b820152908501908301611ae7565b505084890196505b50505050505092915050565b6000611b29611b238388611a7a565b86611a7a565b612f2360f01b81528451611b44816002840160208901611f48565b602d60f81b600292909101918201528351611b66816003840160208801611f48565b016003019695505050505050565b6000611b808286611a7a565b612f2360f01b81528451611b9b816002840160208901611f48565b602d60f81b600292909101918201528351611bbd816003840160208801611f48565b0160030195945050505050565b7f7b226e616d65223a225369676e6174757265204e465420230000000000000000815260008451611c02816018850160208901611f48565b7f222c226465736372697074696f6e223a224120756e69717565207369676e206f6018918401918201527f66206f75722074696d65732c2073656c656374656420746f207265707265736560388201527f6e7420696e6372656173696e676c79207369676e69666963616e74206d6f6e6560588201527f7920696e207468697320696e66696e6974652067616d6520776520617265207060788201527f6c6179696e6720746f6765746865722e20417320796f7520636f6e736964657260988201527f20746865736520756e697175652073796d626f6c732c2072656d656d6265722060b88201527f74686174207765616c7468207472756c79206d65616e7320686176696e67206560d88201527f6e6f75676820746f2073686172652e222c2265787465726e616c5f75726c223a60f8820152601160f91b610118820152611d8b611d7d611d77611d58610119850189611a5e565b7211161130b734b6b0ba34b7b72fbab936111d1160691b815260130190565b86611a5e565b61227d60f01b815260020190565b9695505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251611dcd81601d850160208701611f48565b91909101601d0192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611d8b90830184611a32565b6020815260006117c46020830184611a32565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008219821115611ed657611ed6611fde565b500190565b600082611eea57611eea611ff4565b500490565b6000816000190483118215151615611f0957611f09611fde565b500290565b600061ffff83811690831681811015611f2957611f29611fde565b039392505050565b600082821015611f4357611f43611fde565b500390565b60005b83811015611f63578181015183820152602001611f4b565b83811115610aa35750506000910152565b600181811c90821680611f8857607f821691505b60208210811415611fa957634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611fc357611fc3611fde565b5060010190565b600082611fd957611fd9611ff4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461204b57600080fd5b50565b6001600160e01b03198116811461204b57600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f68747470733a2f2f617277656176652e6e65742f686837414e4644665f4c767a6b747168774f7a4d6b49614f6c7664685f54325f57515259316b5173633159a2646970667358221220e39c27ea85b88e391d135c02ef5076ec05ac6c4109589180b4bcc7d561e4c9be64736f6c63430008070033516d59484747546271774674664c466868414b6f6a56626d4a776b564d4e7971726e694739484c4c31505970794468747470733a2f2f617277656176652e6e65742f776d6e363635716a43354a35385179467661534a4e455570436d7373317266462d3162367862547378703468747470733a2f2f617277656176652e6e65742f3062354874795477506774575937324f454e6649334a7a3775676b437a59444b636e526b70674c43783634",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c80636352211e116100c3578063b88d4fde1161007c578063b88d4fde146102da578063c87b56dd146102ed578063d016fc2214610300578063e726168714610349578063e8a3d4851461035c578063e985e9c51461036457600080fd5b80636352211e146102655780636f951f381461027857806370a082311461028b5780638c7ea24b146102ac57806395d89b41146102bf578063a22cb465146102c757600080fd5b806323b872dd1161011557806323b872dd146101f55780632a55205a14610208578063427158f61461023a57806342842e0e1461024257806350a9e127146102555780635a41c8551461025d57600080fd5b806301ffc9a71461015d57806302d05d3f1461018557806306fdde03146101b0578063081812fc146101c5578063095ea7b3146101d8578063116191b6146101ed575b600080fd5b61017061016b366004611924565b610377565b60405190151581526020015b60405180910390f35b600f54610198906001600160a01b031681565b6040516001600160a01b03909116815260200161017c565b6101b8610388565b60405161017c9190611e0d565b6101986101d33660046119f7565b61041a565b6101eb6101e63660046118f8565b6104b4565b005b6101b86105ca565b6101eb610203366004611804565b610658565b61021b610216366004611a10565b610689565b604080516001600160a01b03909316835260208301919091520161017c565b6101b86106de565b6101eb610250366004611804565b6106eb565b6101b8610706565b6101b8610713565b6101986102733660046119f7565b610720565b6101eb6102863660046119c4565b610797565b61029e6102993660046117a7565b6108dd565b60405190815260200161017c565b6101eb6102ba3660046118f8565b610964565b6101b861099d565b6101eb6102d53660046118c5565b6109ac565b6101eb6102e8366004611845565b610a71565b6101b86102fb3660046119f7565b610aa9565b61032e61030e3660046119f7565b600a6020526000908152604090205461ffff808216916201000090041682565b6040805161ffff93841681529290911660208301520161017c565b6101eb61035736600461197b565b610c1a565b6101b8610c58565b6101706103723660046117cb565b610c78565b600061038282610d48565b92915050565b60606000805461039790611f74565b80601f01602080910402602001604051908101604052809291908181526020018280546103c390611f74565b80156104105780601f106103e557610100808354040283529160200191610410565b820191906000526020600020905b8154815290600101906020018083116103f357829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104985760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006104bf82610720565b9050806001600160a01b0316836001600160a01b0316141561052d5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161048f565b336001600160a01b038216148061054957506105498133610c78565b6105bb5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161048f565b6105c58383610d6d565b505050565b600b80546105d790611f74565b80601f016020809104026020016040519081016040528092919081815260200182805461060390611f74565b80156106505780601f1061062557610100808354040283529160200191610650565b820191906000526020600020905b81548152906001019060200180831161063357829003601f168201915b505050505081565b6106623382610ddb565b61067e5760405162461bcd60e51b815260040161048f90611e72565b6105c5838383610eaa565b604080518082019091526007546001600160a01b038116808352600160a01b90910462ffffff16602083018190529091600091612710906106ca9086611eef565b6106d49190611edb565b9150509250929050565b600e80546105d790611f74565b6105c583838360405180602001604052806000815250610a71565b600d80546105d790611f74565b600c80546105d790611f74565b6000818152600260205260408120546001600160a01b0316806103825760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161048f565b8061ffff168261ffff161080156107ac575060015b80156107be575061331b8161ffff1611155b80156107d957506101cf6107d28383611f0e565b61ffff1611155b6108155760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b604482015260640161048f565b600061082060095490565b60408051808201825261ffff808716825285811660208084019182526000868152600a909152939093209151825493518216620100000263ffffffff19909416911617919091179055600f54909150610883906001600160a01b0316338361104a565b610891600980546001019055565b6040805133815261ffff8581166020830152841681830152905182917f33544f5c3a1a056bc1ca444c63ba29f441dad27582b6fe53231f9ba7f197c52b919081900360600190a2505050565b60006001600160a01b0382166109485760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161048f565b506001600160a01b031660009081526003602052604090205490565b600f546001600160a01b0316331461098f5760405163ea8e4eb560e01b815260040160405180910390fd5b6109998282611065565b5050565b60606001805461039790611f74565b6001600160a01b038216331415610a055760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161048f565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610a7b3383610ddb565b610a975760405162461bcd60e51b815260040161048f90611e72565b610aa384848484611101565b50505050565b6000818152600260205260409020546060906001600160a01b0316610afc5760405162461bcd60e51b81526020600482015260096024820152681b9bdd08195e1a5cdd60ba1b604482015260640161048f565b6000828152600a6020908152604080832081518083019092525461ffff8082168084526201000090920416928201929092529190600b90600c90610b3f90611134565b610b50856020015161ffff16611134565b604051602001610b639493929190611b14565b60405160208183030381529060405290506000600d610b89846000015161ffff16611134565b610b9a856020015161ffff16611134565b604051602001610bac93929190611b74565b6040516020818303038152906040529050610bf1610bc986611134565b8284604051602001610bdd93929190611bca565b604051602081830303815290604052611232565b604051602001610c019190611d95565b6040516020818303038152906040529350505050919050565b600f546001600160a01b03163314610c455760405163ea8e4eb560e01b815260040160405180910390fd5b805161099990600b906020840190611681565b60606040518060600160405280603f81526020016120a5603f9139905090565b60085460405163c455279160e01b81526001600160a01b03848116600483015260009281169190841690829063c45527919060240160206040518083038186803b158015610cc557600080fd5b505afa158015610cd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfd919061195e565b6001600160a01b03161415610d16576001915050610382565b6001600160a01b0380851660009081526005602090815260408083209387168352929052205460ff165b949350505050565b60006001600160e01b0319821663152a902d60e11b1480610382575061038282611386565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610da282610720565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316610e545760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161048f565b6000610e5f83610720565b9050806001600160a01b0316846001600160a01b03161480610e9a5750836001600160a01b0316610e8f8461041a565b6001600160a01b0316145b80610d405750610d408185610c78565b826001600160a01b0316610ebd82610720565b6001600160a01b031614610f255760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161048f565b6001600160a01b038216610f875760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161048f565b610f92600082610d6d565b6001600160a01b0383166000908152600360205260408120805460019290610fbb908490611f31565b90915550506001600160a01b0382166000908152600360205260408120805460019290610fe9908490611ec3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6105c5838383604051806020016040528060008152506113d6565b6127108111156110b75760405162461bcd60e51b815260206004820152601a60248201527f45524332393831526f79616c746965733a20546f6f2068696768000000000000604482015260640161048f565b604080518082019091526001600160a01b0390921680835262ffffff909116602090920182905260078054600160a01b9093026001600160b81b0319909316909117919091179055565b61110c848484610eaa565b611118848484846113ea565b610aa35760405162461bcd60e51b815260040161048f90611e20565b6060816111585750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611182578061116c81611faf565b915061117b9050600a83611edb565b915061115c565b60008167ffffffffffffffff81111561119d5761119d612020565b6040519080825280601f01601f1916602001820160405280156111c7576020820181803683370190505b5090505b8415610d40576111dc600183611f31565b91506111e9600a86611fca565b6111f4906030611ec3565b60f81b8183815181106112095761120961200a565b60200101906001600160f81b031916908160001a90535061122b600a86611edb565b94506111cb565b606081516000141561125257505060408051602081019091526000815290565b600060405180606001604052806040815260200161206560409139905060006003845160026112819190611ec3565b61128b9190611edb565b611296906004611eef565b67ffffffffffffffff8111156112ae576112ae612020565b6040519080825280601f01601f1916602001820160405280156112d8576020820181803683370190505b509050600182016020820185865187015b80821015611344576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453506001830192506112e9565b505060038651066001811461136057600281146113735761137b565b603d6001830353603d600283035361137b565b603d60018303535b509195945050505050565b60006001600160e01b031982166380ac58cd60e01b14806113b757506001600160e01b03198216635b5e139f60e01b145b8061038257506301ffc9a760e01b6001600160e01b0319831614610382565b6113e18484846114f7565b61111860008484845b60006001600160a01b0384163b156114ec57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061142e903390899088908890600401611dda565b602060405180830381600087803b15801561144857600080fd5b505af1925050508015611478575060408051601f3d908101601f1916820190925261147591810190611941565b60015b6114d2573d8080156114a6576040519150601f19603f3d011682016040523d82523d6000602084013e6114ab565b606091505b5080516114ca5760405162461bcd60e51b815260040161048f90611e20565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610d40565b506001949350505050565b6001600160a01b03821661154d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161048f565b6000818152600260205260409020546001600160a01b0316156115b25760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161048f565b6001600160a01b03821660009081526003602052604081208054600192906115db908490611ec3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03868116919091179091559051839291861691907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a480826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b82805461168d90611f74565b90600052602060002090601f0160209004810192826116af57600085556116f5565b82601f106116c857805160ff19168380011785556116f5565b828001600101855582156116f5579182015b828111156116f55782518255916020019190600101906116da565b50611701929150611705565b5090565b5b808211156117015760008155600101611706565b600067ffffffffffffffff8084111561173557611735612020565b604051601f8501601f19908116603f0116810190828211818310171561175d5761175d612020565b8160405280935085815286868601111561177657600080fd5b858560208301376000602087830101525050509392505050565b803561ffff811681146117a257600080fd5b919050565b6000602082840312156117b957600080fd5b81356117c481612036565b9392505050565b600080604083850312156117de57600080fd5b82356117e981612036565b915060208301356117f981612036565b809150509250929050565b60008060006060848603121561181957600080fd5b833561182481612036565b9250602084013561183481612036565b929592945050506040919091013590565b6000806000806080858703121561185b57600080fd5b843561186681612036565b9350602085013561187681612036565b925060408501359150606085013567ffffffffffffffff81111561189957600080fd5b8501601f810187136118aa57600080fd5b6118b98782356020840161171a565b91505092959194509250565b600080604083850312156118d857600080fd5b82356118e381612036565b9150602083013580151581146117f957600080fd5b6000806040838503121561190b57600080fd5b823561191681612036565b946020939093013593505050565b60006020828403121561193657600080fd5b81356117c48161204e565b60006020828403121561195357600080fd5b81516117c48161204e565b60006020828403121561197057600080fd5b81516117c481612036565b60006020828403121561198d57600080fd5b813567ffffffffffffffff8111156119a457600080fd5b8201601f810184136119b557600080fd5b610d408482356020840161171a565b600080604083850312156119d757600080fd5b6119e083611790565b91506119ee60208401611790565b90509250929050565b600060208284031215611a0957600080fd5b5035919050565b60008060408385031215611a2357600080fd5b50508035926020909101359150565b60008151808452611a4a816020860160208601611f48565b601f01601f19169290920160200192915050565b60008151611a70818560208601611f48565b9290920192915050565b8054600090600181811c9080831680611a9457607f831692505b6020808410821415611ab657634e487b7160e01b600052602260045260246000fd5b818015611aca5760018114611adb57611b08565b60ff19861689528489019650611b08565b60008881526020902060005b86811015611b005781548b820152908501908301611ae7565b505084890196505b50505050505092915050565b6000611b29611b238388611a7a565b86611a7a565b612f2360f01b81528451611b44816002840160208901611f48565b602d60f81b600292909101918201528351611b66816003840160208801611f48565b016003019695505050505050565b6000611b808286611a7a565b612f2360f01b81528451611b9b816002840160208901611f48565b602d60f81b600292909101918201528351611bbd816003840160208801611f48565b0160030195945050505050565b7f7b226e616d65223a225369676e6174757265204e465420230000000000000000815260008451611c02816018850160208901611f48565b7f222c226465736372697074696f6e223a224120756e69717565207369676e206f6018918401918201527f66206f75722074696d65732c2073656c656374656420746f207265707265736560388201527f6e7420696e6372656173696e676c79207369676e69666963616e74206d6f6e6560588201527f7920696e207468697320696e66696e6974652067616d6520776520617265207060788201527f6c6179696e6720746f6765746865722e20417320796f7520636f6e736964657260988201527f20746865736520756e697175652073796d626f6c732c2072656d656d6265722060b88201527f74686174207765616c7468207472756c79206d65616e7320686176696e67206560d88201527f6e6f75676820746f2073686172652e222c2265787465726e616c5f75726c223a60f8820152601160f91b610118820152611d8b611d7d611d77611d58610119850189611a5e565b7211161130b734b6b0ba34b7b72fbab936111d1160691b815260130190565b86611a5e565b61227d60f01b815260020190565b9695505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251611dcd81601d850160208701611f48565b91909101601d0192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611d8b90830184611a32565b6020815260006117c46020830184611a32565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60008219821115611ed657611ed6611fde565b500190565b600082611eea57611eea611ff4565b500490565b6000816000190483118215151615611f0957611f09611fde565b500290565b600061ffff83811690831681811015611f2957611f29611fde565b039392505050565b600082821015611f4357611f43611fde565b500390565b60005b83811015611f63578181015183820152602001611f4b565b83811115610aa35750506000910152565b600181811c90821680611f8857607f821691505b60208210811415611fa957634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611fc357611fc3611fde565b5060010190565b600082611fd957611fd9611ff4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461204b57600080fd5b50565b6001600160e01b03198116811461204b57600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f68747470733a2f2f617277656176652e6e65742f686837414e4644665f4c767a6b747168774f7a4d6b49614f6c7664685f54325f57515259316b5173633159a2646970667358221220e39c27ea85b88e391d135c02ef5076ec05ac6c4109589180b4bcc7d561e4c9be64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "mintSelected(uint16,uint16)": {
        "params": {
          "end": "the word index where the chosen highlight ends",
          "start": "the word index the chosen highlight starts on"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "royaltyInfo(uint256,uint256)": {
        "params": {
          "_tokenId": "- the NFT asset queried for royalty information",
          "_value": "- the sale price of the NFT asset specified by _tokenId"
        },
        "returns": {
          "receiver": "- address of who should be sent the royalty payment",
          "royaltyAmount": "- the royalty payment amount for value sale price"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setRoyalties(address,uint256)": {
        "params": {
          "recipient": "the royalties recipient - will always be pr1s0nart, for regulatory reasons.",
          "value": "royalties value (between 0 and 10000)"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "id": "the tokenId for which we are querying the metadata"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "contractURI()": {
        "notice": "Link to contract metadata"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings."
      },
      "mintSelected(uint16,uint16)": {
        "notice": "mints a unique NFT from some user-selected piece of text (which we make into an image & store in Arweave)"
      },
      "setRoyalties(address,uint256)": {
        "notice": "Set the royalties for the whole contract. Our intention is to set it to 10% in perpetuity."
      },
      "tokenURI(uint256)": {
        "notice": "this overrides the usual tokenURI to return base64 encoded metadata and, in particular, an animation_url rather than an           image field, because that is how secondary marketplaces will display the image generated by our little React img generator           living immutably on IPFS."
      },
      "updateGateway(string)": {
        "notice": "in case the IPFS gateway ever goes down and we need to move to another, more local, solution"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1880,
        "contract": "contracts/SignatureNFT.sol:SignatureNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1882,
        "contract": "contracts/SignatureNFT.sol:SignatureNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1886,
        "contract": "contracts/SignatureNFT.sol:SignatureNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1890,
        "contract": "contracts/SignatureNFT.sol:SignatureNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1894,
        "contract": "contracts/SignatureNFT.sol:SignatureNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1900,
        "contract": "contracts/SignatureNFT.sol:SignatureNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2829,
        "contract": "contracts/SignatureNFT.sol:SignatureNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1755,
        "contract": "contracts/SignatureNFT.sol:SignatureNFT",
        "label": "_royalties",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(RoyaltyInfo)1831_storage"
      },
      {
        "astId": 2708,
        "contract": "contracts/SignatureNFT.sol:SignatureNFT",
        "label": "proxyRegistryAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 1477,
        "contract": "contracts/SignatureNFT.sol:SignatureNFT",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Counter)832_storage"
      },
      {
        "astId": 1489,
        "contract": "contracts/SignatureNFT.sol:SignatureNFT",
        "label": "selection",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(Highlight)1484_storage)"
      },
      {
        "astId": 1492,
        "contract": "contracts/SignatureNFT.sol:SignatureNFT",
        "label": "gateway",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 1495,
        "contract": "contracts/SignatureNFT.sol:SignatureNFT",
        "label": "imgHash",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 1498,
        "contract": "contracts/SignatureNFT.sol:SignatureNFT",
        "label": "backup",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 1501,
        "contract": "contracts/SignatureNFT.sol:SignatureNFT",
        "label": "essay",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 1503,
        "contract": "contracts/SignatureNFT.sol:SignatureNFT",
        "label": "creator",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Highlight)1484_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SignatureNFT.Highlight)",
        "numberOfBytes": "32",
        "value": "t_struct(Highlight)1484_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)832_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 831,
            "contract": "contracts/SignatureNFT.sol:SignatureNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Highlight)1484_storage": {
        "encoding": "inplace",
        "label": "struct SignatureNFT.Highlight",
        "members": [
          {
            "astId": 1481,
            "contract": "contracts/SignatureNFT.sol:SignatureNFT",
            "label": "start",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 1483,
            "contract": "contracts/SignatureNFT.sol:SignatureNFT",
            "label": "end",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)1831_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981Royalties.RoyaltyInfo",
        "members": [
          {
            "astId": 1828,
            "contract": "contracts/SignatureNFT.sol:SignatureNFT",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1830,
            "contract": "contracts/SignatureNFT.sol:SignatureNFT",
            "label": "amount",
            "offset": 20,
            "slot": "0",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}